#!/bin/bash
# Script para build e deploy do VX Autope√ßas

set -e

echo "üöÄ VX Autope√ßas - Build e Deploy Docker"
echo "======================================"

# Fun√ß√£o para mostrar ajuda
show_help() {
    echo "Uso: $0 [COMANDO]"
    echo ""
    echo "Comandos dispon√≠veis:"
    echo "  build       - Build das imagens Docker"
    echo "  dev         - Iniciar ambiente de desenvolvimento"
    echo "  prod        - Iniciar ambiente de produ√ß√£o"
    echo "  stop        - Parar todos os containers"
    echo "  clean       - Limpar containers e imagens"
    echo "  logs        - Mostrar logs dos containers"
    echo "  restart     - Reiniciar todos os servi√ßos"
    echo "  help        - Mostrar esta ajuda"
    echo ""
}

# Fun√ß√£o para build das imagens
build_images() {
    echo "üì¶ Fazendo build das imagens Docker..."
    
    echo "üî® Frontend (Next.js)..."
    docker build -t vx-autopecas/frontend:latest .
    
    echo "üî® Backend (Node.js)..."
    docker build -t vx-autopecas/backend:latest ./backend
    
    echo "‚úÖ Build conclu√≠do!"
}

# Fun√ß√£o para ambiente de desenvolvimento
start_dev() {
    echo "üõ†Ô∏è Iniciando ambiente de desenvolvimento..."
    docker-compose -f docker-compose.dev.yml up --build -d
    echo "‚úÖ Ambiente de desenvolvimento iniciado!"
    echo "üåê Frontend: http://localhost:3000"
    echo "üîß Backend: http://localhost:3001"
    echo "üóÑÔ∏è PostgreSQL: localhost:5432"
}

# Fun√ß√£o para ambiente de produ√ß√£o
start_prod() {
    echo "üöÄ Iniciando ambiente de produ√ß√£o..."
    docker-compose up --build -d
    echo "‚úÖ Ambiente de produ√ß√£o iniciado!"
    echo "üåê Frontend: http://localhost:3000"
    echo "üîß Backend: http://localhost:3001"
    echo "üóÑÔ∏è PostgreSQL: localhost:5432"
    echo "üîÑ Nginx: http://localhost:80"
}

# Fun√ß√£o para parar containers
stop_containers() {
    echo "‚èπÔ∏è Parando containers..."
    docker-compose down
    docker-compose -f docker-compose.dev.yml down
    echo "‚úÖ Containers parados!"
}

# Fun√ß√£o para limpeza
clean_all() {
    echo "üßπ Limpando containers e imagens..."
    
    # Parar containers
    stop_containers
    
    # Remover containers
    docker container prune -f
    
    # Remover imagens
    docker rmi vx-autopecas/frontend:latest 2>/dev/null || true
    docker rmi vx-autopecas/backend:latest 2>/dev/null || true
    
    # Remover volumes (cuidado!)
    read -p "‚ö†Ô∏è Deseja remover os volumes do banco de dados? (y/N): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        docker volume rm vx_autopecas_postgres_data 2>/dev/null || true
        docker volume rm vx_autopecas_redis_data 2>/dev/null || true
        echo "üóëÔ∏è Volumes removidos!"
    fi
    
    echo "‚úÖ Limpeza conclu√≠da!"
}

# Fun√ß√£o para mostrar logs
show_logs() {
    echo "üìã Logs dos containers..."
    echo "Pressione Ctrl+C para sair"
    docker-compose logs -f
}

# Fun√ß√£o para reiniciar
restart_services() {
    echo "üîÑ Reiniciando servi√ßos..."
    stop_containers
    sleep 2
    start_prod
}

# Verificar se Docker est√° rodando
check_docker() {
    if ! docker info > /dev/null 2>&1; then
        echo "‚ùå Docker n√£o est√° rodando!"
        echo "Por favor, inicie o Docker e tente novamente."
        exit 1
    fi
}

# Main
main() {
    check_docker
    
    case "${1:-help}" in
        "build")
            build_images
            ;;
        "dev")
            start_dev
            ;;
        "prod")
            start_prod
            ;;
        "stop")
            stop_containers
            ;;
        "clean")
            clean_all
            ;;
        "logs")
            show_logs
            ;;
        "restart")
            restart_services
            ;;
        "help"|*)
            show_help
            ;;
    esac
}

main "$@"